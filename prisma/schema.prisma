generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Citizen {
  name             String
  id               String         @id @default(uuid())
  phone            String         @unique
  password         String
  isVerified       Boolean        @default(false)
  profileImage     String         @default("https://static.vecteezy.com/system/resources/previews/000/574/512/original/vector-sign-of-user-icon.jpg")
  OTP              String?        @unique
  OTPExpiresAt     DateTime?
  latitude         Float
  longitude        Float
  reputationPoints Int            @default(100)
  myList           Issue[]        @relation("myIssue")
  Notifications    Notification[] @relation("Notification")
  upVoted          Issue[]        @relation("upVoted")
}

model Authority {
  name                       String
  id                         String     @id @default(uuid())
  email                      String     @unique
  password                   String
  isVerified                 Boolean    @default(false)
  resetPasswordToken         String?
  resetPasswordExpiresAt     DateTime?
  verificationToken          String?
  verificationTokenExpiresAt DateTime?
  officeId                   String
  role                       String
  profileImage               String     @default("https://static.vecteezy.com/system/resources/previews/000/574/512/original/vector-sign-of-user-icon.jpg")
  departmentName             String
  department                 Department @relation("DepartmentEmployees", fields: [officeId, departmentName], references: [officeId, name])
  office                     Office     @relation("OfficeEmployees", fields: [officeId], references: [id])
  assignedIssues             Issue[]    @relation("AssignedIssues")
}

model Office {
  id          String       @id
  name        String
  latitude    Float
  longitude   Float
  location    String
  employees   Authority[]  @relation("OfficeEmployees")
  departments Department[] @relation("DepartmentOffice")
  issues      Issue[]      @relation("OfficeIssues")
}

model Issue {
  id                     String         @id @default(uuid())
  title                  String
  latitude               String
  longitude              String
  description            String
  image                  String?
  userId                 String
  assignedToId           String?
  officeId               String
  status                 status         @default(PENDING)
  dispute                Boolean        @default(false)
  disputeMessage         String?
  createdAt              DateTime       @default(now())
  isAnonymous            Boolean        @default(false)
  location               String
  address                String
  departmentName         String?
  departmentOfficeId     String?
  assignedToDate         DateTime?
  forwardedDate          DateTime?
  ResolutionConfirmation Boolean        @default(false)
  conflictResolvedDate   DateTime?
  resolvedDate           DateTime?
  audio                  String
  category               Category?
  assignedTo             Authority?     @relation("AssignedIssues", fields: [assignedToId], references: [id])
  department             Department?    @relation("DepartmentIssues", fields: [departmentOfficeId, departmentName], references: [officeId, name])
  office                 Office         @relation("OfficeIssues", fields: [officeId], references: [id])
  user                   Citizen        @relation("myIssue", fields: [userId], references: [id])
  Notifications          Notification[] @relation("IssueNotification")
  updates                Update[]
  upVotes                Citizen[]      @relation("upVoted")
  priority String @default("NORMAL")
}

model Department {
  name      String
  officeId  String
  employees Authority[] @relation("DepartmentEmployees")
  office    Office      @relation("DepartmentOffice", fields: [officeId], references: [id])
  issues    Issue[]     @relation("DepartmentIssues")

  @@id([officeId, name])
}

model Update {
  id          String   @id @default(uuid())
  description String
  issueId     String
  createdAt   DateTime @default(now())
  issue       Issue    @relation(fields: [issueId], references: [id])
}

model Notification {
  id          String   @id @default(uuid())
  description String
  userId      String
  createdAt   DateTime @default(now())
  issueId     String
  title       String
  issue       Issue    @relation("IssueNotification", fields: [issueId], references: [id])
  user        Citizen  @relation("Notification", fields: [userId], references: [id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum status {
  PENDING
  IN_PROGRESS
  RESOLVED
  DISPUTED
  FORWARDED
  UNDER_REVIEW
}

enum Category {
  ENVIRONMENTAL_ISSUES
  PUBLIC_SAFETY
  PUBLIC_HEALTH
  TRANSPORTATION
  HOUSING
  EDUCATION
  ECONOMY
  SOCIAL_WELFARE
}
